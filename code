# Speech and Emotion Recognition using LSTM and MFCC

# === preprocess.py ===
import os
import numpy as np
import librosa
from sklearn.model_selection import train_test_split

DATA_PATH = "./ravdess_data"
EMOTIONS = {
    '01': 'neutral', '02': 'calm', '03': 'happy', '04': 'sad',
    '05': 'angry', '06': 'fearful', '07': 'disgust', '08': 'surprised'
}

def extract_features(file_path):
    audio, sample_rate = librosa.load(file_path, res_type='kaiser_fast')
    mfccs = librosa.feature.mfcc(y=audio, sr=sample_rate, n_mfcc=40)
    return np.mean(mfccs.T, axis=0)

def load_data():
    features, labels = [], []
    for root, _, files in os.walk(DATA_PATH):
        for file in files:
            if file.endswith(".wav"):
                emotion_code = file.split("-")[2]
                emotion = EMOTIONS.get(emotion_code)
                if emotion:
                    path = os.path.join(root, file)
                    mfcc = extract_features(path)
                    features.append(mfcc)
                    labels.append(emotion)
    return np.array(features), np.array(labels)

# === model.py ===
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout, Reshape
from tensorflow.keras.utils import to_categorical
from sklearn.preprocessing import LabelEncoder

def build_model(input_shape, num_classes):
    model = Sequential()
    model.add(Reshape((input_shape[0], 1), input_shape=input_shape))
    model.add(LSTM(128, return_sequences=False))
    model.add(Dropout(0.3))
    model.add(Dense(num_classes, activation='softmax'))
    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
    return model

# === train.py ===
from preprocess import load_data
from model import build_model
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical

X, y = load_data()
encoder = LabelEncoder()
y_encoded = to_categorical(encoder.fit_transform(y))
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)

model = build_model(X.shape[1:], y_encoded.shape[1])
model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))
model.save("emotion_model.h5")

# === .gitignore ===
__pycache__/
*.h5
*.pyc
.DS_Store

# === requirements.txt ===
numpy
librosa
scikit-learn
tensorflow
